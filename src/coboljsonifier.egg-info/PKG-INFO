Metadata-Version: 2.1
Name: coboljsonifier
Version: 1.0.2
Summary: Convert cobol copybook to Json and parse data files based on it
Home-page: https://github.com/jrperin/cobol-copybook.jsonifier
Author: Joao Roberto Perin
License: UNKNOWN
Project-URL: Bug Tracker, https://github.com/jrperin/cobol-copybook.jsonifier/issues
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown

# Cobol Copybook JSONifier

[CHANGELOG.md](CHANGELOG.md)

----

## What is that for?

The main idea is to convert files from Mainframe that was generated by Cobol Programs that use Cobol-Copybooks.

Cobol copybooks are like data schemas for raw positional data.

To use the package you need:
1. Extract a cobol copybook structure to generate a python dictionary. This dictionary contains objects neededs to build the parser.

2. Build a Parser based on the previous copybook struture extracted.The parser contains python objects that will handle each kind of data field in the Mainframe's file. That file could be eater EBCDI or ASCII.
    > **Note:**  
    > For ASCII it doesn't support types such as: `Binary`, `COMP3`, `Signed` etc.  
    > Just suports formats like `PIC 9(n)`, `PIC X(n)` and Masked `PIC +99999.99`. These are formats that could be converted in the transfer process like FTP, Connect Dirct etc from mainframe to another platform.

----

## Straight to the point

Take a look at [pypi.org](https://pypi.org/project/coboljsonifier/)

``` bash
pip install coboljsonifier
```

**example.py**

``` python
import simplejson
from coboljsonifier.copybookextractor import CopybookExtractor
from coboljsonifier.parser import Parser
from coboljsonifier.config.parser_type_enum import ParseType

bookname='DATA1_BOOK.cob'

# extracts book structure
dict_structure = CopybookExtractor(fname).dict_book_structure

print(simplejson.dumps(dict_structure)) 
# See the result bellow in "DATA1_BOOK.cob Structure Extracted"

# Use book structure to build a parser (FLAT_ASCII / BINARY_EBCDIC)
parser = Parser(dict_structure, ParseType.BINARY_EBCDIC).parser
size = parser.size
print("Record lenght:", size)

dataname = "DATA1_DATA.bin"   # Use the DATA1_DATA.bin Generator to have this file

''' Important! 
    EBCDIC files open the file with "rb" "read binary" and reads 
           it by size f2.read(size) - EBCDIC files generally doesn't have end-line character
    ASCII files open the file with r  "read text" and reads it by lines - f2.readline()
'''
i = 0
with open(fname2, 'r') as f2:
    while True:
        #EBCDIC
        data = f2.read(size)

        # ASCII
        # data = f2.readline()
        if not data:
            break
        i += 1
        parser.parse(data)
        print(simplejson.dumps(parser.value, indent=2))

print(f"Total processed: {i}")
```

**DATA1_BOOK.cob**
``` cobol
      *================================================================*00010000
      *                      COBOL EXAMPLE COPYBOOK                    *00020000
      * -------------------------------------------------------------- *00021000
      * NOTE: This copybook handle binary content that in general are  *00022000
      *       written in EBCDIC content in Mainframes and to use it    *00023000
      *       in other platforms it's necessary to transfer than in    *00024000
      *       binary to preserv their contents.                        *00025000
      *                                Joao Roberto Perin - 2021-09-15 *00026000
      *================================================================*00030000
      *                                           REGISTRY LENGHT: 100 *00040000
      *================================================================*00050000
       01 :DATA1:-DETAIL-REGISTRY.                                      00060000                                                        
          03 :DATA1:-REGISTRY-TYPE             PIC 9(002).              00070000                                                        
             88 :DATA1:-REGISTRY-TYPE-HEADER     VALUE 01.              00080000
             88 :DATA1:-REGISTRY-TYPE-DETAIL     VALUE 02.              00090000
             88 :DATA1:-REGISTRY-TYPE-TRAILLER   VALUE 99.              00100000
          03 :DATA1:-COMPANY                   PIC 9(003).              00110000
          03 :DATA1:-USER-ACCOUNT              PIC X(019).              00120000
          03 :DATA1:-BIRTH-DATE                PIC X(010).              00130000
COMM  *      BIRTH-DATE: YYYY-MM-DD                                     00140000
          03 :DATA1:-NAME                      PIC X(040).              00150000
          03 :DATA1:-CREDIT-LIMIT              PIC S9(07) USAGE BINARY. 00160000
          03 :DATA1:-LIMIT-USED                PIC S9(05)V99 COMP-3.    00170000
          03 :DATA1:-STATUS OCCURS 4 TIMES.                             00180000
             05 :DATA1:-STATUS-FLAG            PIC X(001).              00190000
RESERV    03 FILLER                            PIC X(010).              00200000
      *================================================================*00210000
      *                               END                              *00220000
      *================================================================*00230000
```

**DATA1_DATA.bin - Generator**
``` python
# This little python script generates 3 lines in ebcdic
# To be parsed based on DATA1_BOOK.cob

print('STARTED...')

line1 = b'\xF0\xF2\xF0\xF0\xF4\xF0\xF0\xF4\xF0\xF0\xF0\xF0\xF0\xF0\xF0\xF0\xF9\xF0\xF0\xF0\xF1\xF1\xF1\xF1\xF1\xF9\xF7\xF1\x60\xF0\xF1\x60\xF2\xF1\xD1\xD6\xC8\xD5\x40\xD9\xD6\xC2\xC5\xD9\xE3\x40\xD7\xC5\xD9\xC9\xD5\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x00\x00\x03\xE9\x01\x00\x01\x0D\xF1\xF2\xF3\xF4\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40'
line2 = b'\xF0\xF2\xF0\xF0\xF4\xF0\xF0\xF4\xF0\xF0\xF0\xF0\xF0\xF0\xF0\xF0\xF9\xF0\xF0\xF0\xF2\xF2\xF2\xF2\xF1\xF9\xF8\xF2\x60\xF0\xF2\x60\xF2\xF2\xD4\xC1\xD9\xE8\x40\xC1\xD5\xD5\xC7\xC1\xD9\xC3\xC9\xC1\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\xFF\xFF\xFF\x85\x01\x00\x02\x0C\xF5\xF6\xF7\xF8\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40'
line3 = b'\xF0\xF2\xF0\xF0\xF4\xF0\xF0\xF4\xF0\xF0\xF0\xF0\xF0\xF0\xF0\xF0\xF9\xF0\xF0\xF0\xF3\xF3\xF3\xF3\xF1\xF9\xF9\xF3\x60\xF0\xF3\x60\xF2\xF3\xD7\xC5\xE3\xC5\xD9\x40\xD7\xC1\xD9\xD2\xC5\xD9\xC2\xD9\xC1\xE9\xC9\xD3\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x00\x00\x00\x7B\x03\x00\x03\x0C\xF9\xF0\xC1\xC2\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40'

datafname = './tests/test_files/DATA1_DATA.bin'

with open(datafname, 'wb') as f:
    f.write(line1)
    f.write(line2)
    f.write(line3)

print("ENDED...")
```

**DATA1_BOOK.cob Structure Extracted**
``` json
{"DATA1-REGISTRY-TYPE": {"type": "NUMERIC", "level": 3, "name": "DATA1-REGISTRY-TYPE", "format": "9(002)", "subformat": "NORMAL", "decimals": 0, "size": 2, "start": 0, "occurs": null}, "DATA1-COMPANY": {"type": "NUMERIC", "level": 3, "name": "DATA1-COMPANY", "format": "9(003)", "subformat": "NORMAL", "decimals": 0, "size": 3, "start": 2, "occurs": null}, "DATA1-USER-ACCOUNT": {"type": "ALPHANUMERIC", "level": 3, "name": "DATA1-USER-ACCOUNT", "format": "X(019)", "subformat": "NORMAL", "decimals": 0, "size": 19, "start": 5, "occurs": null}, "DATA1-BIRTH-DATE": {"type": "ALPHANUMERIC", "level": 3, "name": "DATA1-BIRTH-DATE", "format": "X(010)", "subformat": "NORMAL", "decimals": 0, "size": 10, "start": 24, "occurs": null}, "DATA1-NAME": {"type": "ALPHANUMERIC", "level": 3, "name": "DATA1-NAME", "format": "X(040)", "subformat": "NORMAL", "decimals": 0, "size": 40, "start": 34, "occurs": null}, "DATA1-CREDIT-LIMIT": {"type": "NUMERIC_BINARY", "level": 3, "name": "DATA1-CREDIT-LIMIT", "format": "S9(07)", "subformat": "BINARY", "decimals": 0, "size": 4, "start": 74, "occurs": null}, "DATA1-LIMIT-USED": {"type": "NUMERIC_COMP3", "level": 3, "name": "DATA1-LIMIT-USED", "format": "S9(05)V99", "subformat": "COMP-3", "decimals": 2, "size": 4, "start": 78, "occurs": null}, "DATA1-STATUS": [{"DATA1-STATUS-FLAG": {"type": "ALPHANUMERIC", "level": 5, "name": "DATA1-STATUS-FLAG", "format": "X(001)", "subformat": "NORMAL", "decimals": 0, "size": 1, "start": 82, "occurs": null}}, {"DATA1-STATUS-FLAG": {"type": "ALPHANUMERIC", "level": 5, "name": "DATA1-STATUS-FLAG", "format": "X(001)", "subformat": "NORMAL", "decimals": 0, "size": 1, "start": 82, "occurs": null}}, {"DATA1-STATUS-FLAG": {"type": "ALPHANUMERIC", "level": 5, "name": "DATA1-STATUS-FLAG", "format": "X(001)", "subformat": "NORMAL", "decimals": 0, "size": 1, "start": 82, "occurs": null}}, {"DATA1-STATUS-FLAG": {"type": "ALPHANUMERIC", "level": 5, "name": "DATA1-STATUS-FLAG", "format": "X(001)", "subformat": "NORMAL", "decimals": 0, "size": 1, "start": 82, "occurs": null}}], "FILLER-1": {"type": "ALPHANUMERIC", "level": 3, "name": "FILLER-1", "format": "X(010)", "subformat": "NORMAL", "decimals": 0, "size": 10, "start": 82, "occurs": null}}
```

**Json Data from file parsed based in the cobolbook**
``` json
// Registry calculated lenght: 100
// ----------------------------------------------------------------------

// Registry : 1  --------------------------------------------------
{"DATA1-REGISTRY-TYPE": 2, "DATA1-COMPANY": 4, "DATA1-USER-ACCOUNT": "0040000000090001111", "DATA1-BIRTH-DATE": "1971-01-21", "DATA1-NAME": "JOHN ROBERT PERIN", "DATA1-CREDIT-LIMIT": 1001, "DATA1-LIMIT-USED": -1000.1000000000000227373675443232059478759765625, "DATA1-STATUS": [{"DATA1-STATUS-FLAG": "1"}, {"DATA1-STATUS-FLAG": "2"}, {"DATA1-STATUS-FLAG": "3"}, {"DATA1-STATUS-FLAG": "4"}], "FILLER-1": null}

// Registry : 2  --------------------------------------------------
{"DATA1-REGISTRY-TYPE": 2, "DATA1-COMPANY": 4, "DATA1-USER-ACCOUNT": "0040000000090002222", "DATA1-BIRTH-DATE": "1971-01-21", "DATA1-NAME": "MARY ANNGARCIA", "DATA1-CREDIT-LIMIT": -123, "DATA1-LIMIT-USED": 1000.200000000000045474735088646411895751953125, "DATA1-STATUS": [{"DATA1-STATUS-FLAG": "5"}, {"DATA1-STATUS-FLAG": "6"}, {"DATA1-STATUS-FLAG": "7"}, {"DATA1-STATUS-FLAG": "8"}], "FILLER-1": null}

// Registry : 3  --------------------------------------------------
{"DATA1-REGISTRY-TYPE": 2, "DATA1-COMPANY": 4, "DATA1-USER-ACCOUNT": "0040000000090003333", "DATA1-BIRTH-DATE": "1971-01-21", "DATA1-NAME": "PETER PARKERBRAZIL", "DATA1-CREDIT-LIMIT": 123, "DATA1-LIMIT-USED": 3000.3000000000001818989403545856475830078125, "DATA1-STATUS": [{"DATA1-STATUS-FLAG": "9"}, {"DATA1-STATUS-FLAG": "0"}, {"DATA1-STATUS-FLAG": "A"}, {"DATA1-STATUS-FLAG": "B"}], "FILLER-1": null}
// ----------------------------------------------------------------------
// Total processed 3
```

-----

## Pre-requisites

* To save in json formats is necessary to use <spam style="color:#009900">`simplejson`</spam> package. It's to keep compatibility of `Decimal` pakage that is used to handle monetary values.
* The common `json` library has incompatibility with Decimal values

* Install `simplejson` just running `pip install simplejson`.
* Use `simplejson` the same way of `json`. 
    > Ex.   
    > `install simplejson as json`   
    > It will keep compatibility with the main functionalities.

-----

## Local environment

```bash
$ python -m venv venv
$ source venv/bin/activate
$ pip install -r requirements.txt

```

## Testing

**Undestanding the use with:** `'parser_tester.py'`

``` bash
$ python parser_tester.py
```

**Unit Tests:**
``` bash
# Running only the unittest
$ python -m unittest discover

# Checking test coveraging
$ coverage run -m unittest discover
$ coverage report -m
$ coverage html
```


**Cobol Copybook Example**

``` cobol 
COPY DT00RL
002200 01 :DT00:-RECORD.                                 
002300    03 :DT00:-KEY.                                
002400       05 :DT00:-ORG-ACCT.                       
002500           07 :DT00:-ORG  PIC 999.               
002600           07 :DT00:-ACCT PIC X(19).             
002700       05  :DT00:-STMT-ID-CODE                    
002800                           PIC S9(7)  BINARY.

```

## References

* [Python Packaging Projects](https://packaging.python.org/tutorials/packaging-projects/)

* [Where to put tests](http://pythonchb.github.io/PythonTopics/where_to_put_tests.html)

* [Python Modules](https://docs.python.org/3/tutorial/modules.html)

* [Absolute vs Relative python imports](https://realpython.com/absolute-vs-relative-python-imports/)

* [Python UnitTest](https://pythontesting.net/framework/specify-test-unittest-nosetests-pytest/)

